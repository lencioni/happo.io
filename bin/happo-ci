#!/bin/bash

# Generates and uploads Happo diffs for the differences between the base commit
# and current commit.

# Make the whole script fail on errors
set -eou pipefail

# Initialize optional env variables
INSTALL_CMD=${INSTALL_CMD:-}
HAPPO_GIT_COMMAND=${HAPPO_GIT_COMMAND:-git}
HAPPO_COMMAND=${HAPPO_COMMAND:-"node_modules/happo.io/build/cli.js"}

# Make sure we use the full commit shas
if [ -n "$PREVIOUS_SHA" ]; then
  PREVIOUS_SHA="$(${HAPPO_GIT_COMMAND} rev-parse "$PREVIOUS_SHA")"
fi
CURRENT_SHA="$(${HAPPO_GIT_COMMAND} rev-parse "$CURRENT_SHA")"

echo "Using the following ENV variables:"
echo "PREVIOUS_SHA: ${PREVIOUS_SHA}"
echo "CURRENT_SHA: ${CURRENT_SHA}"
echo "CHANGE_URL: ${CHANGE_URL}"
echo "INSTALL_CMD: ${INSTALL_CMD}"

NPM_CLIENT="npm"
NPM_CLIENT_FLAGS="--no-save"
CHECK_FOR_HAPPO="npm ls happo.io"
FIRST_RUN="false"
if [ -f "yarn.lock" ]; then
  echo "Detected yarn.lock - using yarn to install dependencies"
  NPM_CLIENT="yarn"
  NPM_CLIENT_FLAGS="--pure-lockfile"
  CHECK_FOR_HAPPO="grep 'happo\.io@' yarn.lock"
fi

CHECK_FOR_HAPPO=${HAPPO_CHECK:-"${CHECK_FOR_HAPPO}"}

run-install() {
  # Install dependencies (again, since we're potentially in a different place in
  # git history)
  if [ -z "$INSTALL_CMD" ]; then
    # Run yarn/npm install
    ${NPM_CLIENT} install ${NPM_CLIENT_FLAGS}
  else
    # Run custom install command(s)
    eval "$INSTALL_CMD"
  fi
}

run-happo() {
  SHA=$1
  QUICK=$2

  ${HAPPO_GIT_COMMAND} checkout --force --quiet "$SHA"
  COMMIT_SUBJECT="$(${HAPPO_GIT_COMMAND} show -s --format=%s)"

  if [ "$QUICK" = "false" ]; then
    run-install
  fi

  if [ "$QUICK" = "true" ] || eval "$CHECK_FOR_HAPPO"; then
    "$HAPPO_COMMAND" run "$SHA" \
    --link "${CHANGE_URL}" \
    --message "${COMMIT_SUBJECT}"
  else
    echo "NPM package happo.io not installed. Assuming this is the first run."
    FIRST_RUN="true"
  fi
}

if [ "$CURRENT_SHA" = "$PREVIOUS_SHA" ] || [ -z "$PREVIOUS_SHA" ]; then
  echo "We're not on a branch, so there's nothing to compare against."
  echo "Running a single happo run on ${CURRENT_SHA}"
  run-happo "$CURRENT_SHA" true
  exit 0;
fi

"$HAPPO_COMMAND" start-job "$PREVIOUS_SHA" "$CURRENT_SHA"

run-happo "$CURRENT_SHA" true

# Check if we need to generate a baseline. In some cases, the baseline is
# already there (some other PR uploaded it), and we can just use the existing
# one.
if ! "$HAPPO_COMMAND" has-report "$PREVIOUS_SHA"; then
  echo "No previous report found for ${PREVIOUS_SHA}. Generating one..."
  run-happo "$PREVIOUS_SHA" false
  
  # Restore git and node_modules to their original state, for anything that
  # might be run after this script.
  git checkout "$CURRENT_SHA"
  run-install
else
  echo "Re-using existing report for ${PREVIOUS_SHA}."
fi

if [ "$FIRST_RUN" = "true" ]; then
  "$HAPPO_COMMAND" empty "$PREVIOUS_SHA"
fi

# Compare reports from the two SHAs.
COMMIT_SUBJECT="$(${HAPPO_GIT_COMMAND} show -s --format=%s)"
COMMIT_AUTHOR="$(${HAPPO_GIT_COMMAND} show -s --format=%ae)"

# `happo compare` exits with an exit code of 113 if there is a diff. To work with
# the exit status, we need to temporarily turn off the fail-on-error behavior.
set +e
SUMMARY=$("$HAPPO_COMMAND" compare "$PREVIOUS_SHA" "$CURRENT_SHA" \
  --link "$CHANGE_URL" \
  --message "$COMMIT_SUBJECT" \
  --author "$COMMIT_AUTHOR")
EXIT_CODE=$?
set -e

echo "$SUMMARY"

if [ "$EXIT_CODE" = "113" ]; then
  # There is a diff. We don't want to fail the script in this case.
  exit 0
fi

exit $EXIT_CODE
